{
  "version": 3,
  "sources": ["../../@gamestdio/scorm/lib/index.js"],
  "sourcesContent": ["\"use strict\";\n/**\n * Based on pipwerks SCORM Wrapper for JavaScript\n * Created by Philip Hutchison, January 2008-2016\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apiHandle = null;\nvar isAPIFound = false;\n/* -------------------------------------------------------------------------\n   api.find(window)\n   Looks for an object named API in parent and opener windows\n   Parameters: window (the browser window object).\n   Returns:    Object if API is found, null if no API found\n---------------------------------------------------------------------------- */\nfunction find(win) {\n    var API = null, findAttempts = 0, findAttemptLimit = 500, traceMsgPrefix = 'SCORM.API.find';\n    while (!win.API &&\n        !win.API_1484_11 &&\n        win.parent &&\n        win.parent != win &&\n        findAttempts <= findAttemptLimit) {\n        findAttempts++;\n        win = win.parent;\n    }\n    //If SCORM version is specified by user, look for specific API\n    if (exports.scorm.version) {\n        switch (exports.scorm.version) {\n            case '2004':\n                if (win.API_1484_11) {\n                    API = win.API_1484_11;\n                }\n                else {\n                    debug(traceMsgPrefix +\n                        ': SCORM version 2004 was specified by user, but API_1484_11 cannot be found.');\n                }\n                break;\n            case '1.2':\n                if (win.API) {\n                    API = win.API;\n                }\n                else {\n                    debug(traceMsgPrefix +\n                        ': SCORM version 1.2 was specified by user, but API cannot be found.');\n                }\n                break;\n        }\n    }\n    else {\n        //If SCORM version not specified by user, look for APIs\n        if (win.API_1484_11) {\n            //SCORM 2004-specific API.\n            exports.scorm.version = '2004'; //Set version\n            API = win.API_1484_11;\n        }\n        else if (win.API) {\n            //SCORM 1.2-specific API\n            exports.scorm.version = '1.2'; //Set version\n            API = win.API;\n        }\n    }\n    if (API) {\n        debug(traceMsgPrefix + ': API found. Version: ' + exports.scorm.version);\n        debug('API: ' + API);\n    }\n    else {\n        debug(traceMsgPrefix +\n            ': Error finding API. \\nFind attempts: ' +\n            findAttempts +\n            '. \\nFind attempt limit: ' +\n            findAttemptLimit);\n    }\n    return API;\n}\n;\n/* -------------------------------------------------------------------------\n   api.get()\n   Looks for an object named API, first in the current window's frame\n   hierarchy and then, if necessary, in the current window's opener window\n   hierarchy (if there is an opener window).\n   Parameters:  None.\n   Returns:     Object if API found, null if no API found\n---------------------------------------------------------------------------- */\nfunction getAPI() {\n    var API = null, win = window;\n    API = find(win);\n    if (!API && win.parent && win.parent != win) {\n        API = find(win.parent);\n    }\n    if (!API && win.top && win.top.opener) {\n        API = find(win.top.opener);\n    }\n    //Special handling for Plateau\n    //Thanks to Joseph Venditti for the patch\n    if (!API && win.top && win.top.opener && win.top.opener.document) {\n        API = find(win.top.opener.document);\n    }\n    if (API) {\n        isAPIFound = true;\n    }\n    else {\n        debug(\"getAPI failed: Can't find the API!\");\n    }\n    return API;\n}\n;\n/* -------------------------------------------------------------------------\n   api.getHandle()\n   Returns the handle to API object if it was previously set\n   Parameters:  None.\n   Returns:     Object (the api.handle variable).\n---------------------------------------------------------------------------- */\nfunction getHandle() {\n    if (!apiHandle && !isAPIFound) {\n        apiHandle = getAPI();\n    }\n    return apiHandle;\n}\n;\n// Public API\nvar Scorm = /** @class */ (function () {\n    function Scorm() {\n        this.handleExitMode = true;\n        this.handleCompletionStatus = true;\n        this.isDebugActive = true;\n        this.isActive = false;\n    }\n    Scorm.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        this.version = config.version;\n        this.handleExitMode = (config.handleExitMode === undefined)\n            ? !!config.handleExitMode\n            : true;\n        this.handleCompletionStatus = (config.handleCompletionStatus === undefined)\n            ? !!config.handleCompletionStatus\n            : true;\n        this.isDebugActive = (config.debug === undefined)\n            ? !!config.debug\n            : true;\n    };\n    Scorm.prototype.initialize = function () {\n        var success = false, traceMsgPrefix = 'scorm.initialize ';\n        debug('connection.initialize called.');\n        if (!this.isActive) {\n            var API = getHandle(), errorCode = 0;\n            if (API) {\n                switch (this.version) {\n                    case '1.2':\n                        success = toBoolean(API.LMSInitialize(''));\n                        break;\n                    case '2004':\n                        success = toBoolean(API.Initialize(''));\n                        break;\n                }\n                if (success) {\n                    //Double-check that connection is active and working before returning 'true' boolean\n                    errorCode = this.getLastError();\n                    if (errorCode !== null && errorCode === 0) {\n                        this.isActive = true;\n                        if (this.handleCompletionStatus) {\n                            //Automatically set new launches to incomplete\n                            this.completionStatus = this.status();\n                            if (this.completionStatus) {\n                                switch (this.completionStatus) {\n                                    //Both SCORM 1.2 and 2004\n                                    case 'not attempted':\n                                        this.status('incomplete');\n                                        break;\n                                    //SCORM 2004 only\n                                    case 'unknown':\n                                        this.status('incomplete');\n                                        break;\n                                    //Additional options, presented here in case you'd like to use them\n                                    //case \"completed\"  : break;\n                                    //case \"incomplete\" : break;\n                                    //case \"passed\"     : break;    //SCORM 1.2 only\n                                    //case \"failed\"     : break;    //SCORM 1.2 only\n                                    //case \"browsed\"    : break;    //SCORM 1.2 only\n                                }\n                                //Commit changes\n                                exports.scorm.commit();\n                            }\n                        }\n                    }\n                    else {\n                        success = false;\n                        debug(traceMsgPrefix +\n                            'failed. \\nError code: ' +\n                            errorCode +\n                            ' \\nError info: ' +\n                            this.getErrorString(errorCode));\n                    }\n                }\n                else {\n                    errorCode = this.getLastError();\n                    if (errorCode !== null && errorCode !== 0) {\n                        debug(traceMsgPrefix +\n                            'failed. \\nError code: ' +\n                            errorCode +\n                            ' \\nError info: ' +\n                            this.getErrorString(errorCode));\n                    }\n                    else {\n                        debug(traceMsgPrefix + 'failed: No response from server.');\n                    }\n                }\n            }\n            else {\n                debug(traceMsgPrefix + 'failed: API is null.');\n            }\n        }\n        else {\n            debug(traceMsgPrefix + 'aborted: Connection already active.');\n        }\n        return success;\n    };\n    Scorm.prototype.terminate = function () {\n        var success = false, traceMsgPrefix = 'scorm.terminate ';\n        if (this.isActive) {\n            var API = getHandle(), errorCode = 0;\n            if (API) {\n                if (exports.scorm.handleExitMode && !this.exitStatus) {\n                    if (this.completionStatus !== 'completed' && this.completionStatus !== 'passed') {\n                        switch (exports.scorm.version) {\n                            case '1.2':\n                                success = exports.scorm.set('cmi.core.exit', 'suspend');\n                                break;\n                            case '2004':\n                                success = exports.scorm.set('cmi.exit', 'suspend');\n                                break;\n                        }\n                    }\n                    else {\n                        switch (exports.scorm.version) {\n                            case '1.2':\n                                success = exports.scorm.set('cmi.core.exit', 'logout');\n                                break;\n                            case '2004':\n                                success = exports.scorm.set('cmi.exit', 'normal');\n                                break;\n                        }\n                    }\n                }\n                //Ensure we persist the data\n                success = exports.scorm.commit();\n                if (success) {\n                    switch (exports.scorm.version) {\n                        case '1.2':\n                            success = toBoolean(API.LMSFinish(''));\n                            break;\n                        case '2004':\n                            success = toBoolean(API.Terminate(''));\n                            break;\n                    }\n                    if (success) {\n                        this.isActive = false;\n                    }\n                    else {\n                        errorCode = this.getLastError();\n                        debug(traceMsgPrefix +\n                            'failed. \\nError code: ' +\n                            errorCode +\n                            ' \\nError info: ' +\n                            this.getErrorString(errorCode));\n                    }\n                }\n            }\n            else {\n                debug(traceMsgPrefix + 'failed: API is null.');\n            }\n        }\n        else {\n            debug(traceMsgPrefix + 'aborted: Connection already terminated.');\n        }\n        return success;\n    };\n    Scorm.prototype.get = function (parameter) {\n        var value = null, traceMsgPrefix = \"scorm.get('\" + parameter + \"') \";\n        if (this.isActive) {\n            var API = getHandle(), errorCode = 0;\n            if (API) {\n                switch (exports.scorm.version) {\n                    case '1.2':\n                        value = API.LMSGetValue(parameter);\n                        break;\n                    case '2004':\n                        value = API.GetValue(parameter);\n                        break;\n                }\n                errorCode = this.getLastError();\n                //GetValue returns an empty string on errors\n                //If value is an empty string, check errorCode to make sure there are no errors\n                if (value !== '' || errorCode === 0) {\n                    //GetValue is successful.\n                    //If parameter is lesson_status/completion_status or exit status, let's\n                    //grab the value and cache it so we can check it during connection.terminate()\n                    switch (parameter) {\n                        case 'cmi.core.lesson_status':\n                        case 'cmi.completion_status':\n                            this.completionStatus = value;\n                            break;\n                        case 'cmi.core.exit':\n                        case 'cmi.exit':\n                            this.exitStatus = value;\n                            break;\n                    }\n                }\n                else {\n                    debug(traceMsgPrefix +\n                        'failed. \\nError code: ' +\n                        errorCode +\n                        '\\nError info: ' +\n                        this.getErrorString(errorCode));\n                }\n            }\n            else {\n                debug(traceMsgPrefix + 'failed: API is null.');\n            }\n        }\n        else {\n            debug(traceMsgPrefix + 'failed: API connection is inactive.');\n        }\n        debug(traceMsgPrefix + ' value: ' + value);\n        return String(value);\n    };\n    Scorm.prototype.set = function (parameter, value) {\n        var success = false, traceMsgPrefix = \"scorm.set('\" + parameter + \"') \";\n        if (this.isActive) {\n            var API = getHandle(), errorCode = 0;\n            if (API) {\n                switch (exports.scorm.version) {\n                    case '1.2':\n                        success = toBoolean(API.LMSSetValue(parameter, value));\n                        break;\n                    case '2004':\n                        success = toBoolean(API.SetValue(parameter, value));\n                        break;\n                }\n                if (success) {\n                    if (parameter === 'cmi.core.lesson_status' ||\n                        parameter === 'cmi.completion_status') {\n                        this.completionStatus = value;\n                    }\n                }\n                else {\n                    errorCode = this.getLastError();\n                    debug(traceMsgPrefix +\n                        'failed. \\nError code: ' +\n                        errorCode +\n                        '. \\nError info: ' +\n                        this.getErrorString(errorCode));\n                }\n            }\n            else {\n                debug(traceMsgPrefix + 'failed: API is null.');\n            }\n        }\n        else {\n            debug(traceMsgPrefix + 'failed: API connection is inactive.');\n        }\n        debug(traceMsgPrefix + ' value: ' + value);\n        return success;\n    };\n    Scorm.prototype.commit = function () {\n        var success = false, traceMsgPrefix = 'scorm.commit failed';\n        if (this.isActive) {\n            var API = getHandle();\n            if (API) {\n                switch (exports.scorm.version) {\n                    case '1.2':\n                        success = toBoolean(API.LMSCommit(''));\n                        break;\n                    case '2004':\n                        success = toBoolean(API.Commit(''));\n                        break;\n                }\n            }\n            else {\n                debug(traceMsgPrefix + ': API is null.');\n            }\n        }\n        else {\n            debug(traceMsgPrefix + ': API connection is inactive.');\n        }\n        return success;\n    };\n    Scorm.prototype.status = function (status) {\n        var success = false, traceMsgPrefix = 'scorm.status failed', cmi = '', action = (arguments.length === 0) ? 'get' : 'set';\n        switch (exports.scorm.version) {\n            case '1.2':\n                cmi = 'cmi.core.lesson_status';\n                break;\n            case '2004':\n                cmi = 'cmi.completion_status';\n                break;\n        }\n        switch (action) {\n            case 'get':\n                success = this.get(cmi);\n                break;\n            case 'set':\n                if (status !== null) {\n                    success = this.set(cmi, status);\n                }\n                else {\n                    success = false;\n                    debug(traceMsgPrefix + ': status was not specified.');\n                }\n                break;\n            default:\n                success = false;\n                debug(traceMsgPrefix + ': no valid action was specified.');\n        }\n        return success;\n    };\n    Scorm.prototype.getLastError = function () {\n        var API = getHandle(), code = 0;\n        if (API) {\n            switch (this.version) {\n                case '1.2':\n                    code = parseInt(API.LMSGetLastError(), 10);\n                    break;\n                case '2004':\n                    code = parseInt(API.GetLastError(), 10);\n                    break;\n            }\n        }\n        else {\n            debug('scorm.getLastError failed: API is null.');\n        }\n        return code;\n    };\n    Scorm.prototype.getErrorString = function (errorCode) {\n        var API = getHandle(), result = '';\n        if (API) {\n            switch (this.version) {\n                case '1.2':\n                    result = API.LMSGetErrorString(errorCode.toString());\n                    break;\n                case '2004':\n                    result = API.GetErrorString(errorCode.toString());\n                    break;\n            }\n        }\n        else {\n            debug('scorm.getErrorString failed: API is null.');\n        }\n        return String(result);\n    };\n    Scorm.prototype.getDiagnostic = function (errorCode) {\n        var API = getHandle(), result = '';\n        if (API) {\n            switch (this.version) {\n                case '1.2':\n                    result = API.LMSGetDiagnostic(errorCode);\n                    break;\n                case '2004':\n                    result = API.GetDiagnostic(errorCode);\n                    break;\n            }\n        }\n        else {\n            debug('scorm.getDiagnostic failed: API is null.');\n        }\n        return String(result);\n    };\n    return Scorm;\n}());\nexports.Scorm = Scorm;\nfunction toBoolean(value) {\n    switch (typeof (value)) {\n        case 'object':\n        case 'string':\n            return /(true|1)/i.test(value);\n        case 'number':\n            return !!value;\n        case 'boolean':\n            return value;\n        case 'undefined':\n            return null;\n        default:\n            return false;\n    }\n}\n;\nfunction debug(msg) {\n    if (exports.scorm.isDebugActive) {\n        window.console.log(msg);\n    }\n}\n;\nexports.scorm = new Scorm();\n"],
  "mappings": "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",
  "names": ["Scorm"]
}
