import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/@gamestdio/scorm/lib/index.js
var require_lib = __commonJS({
  "node_modules/@gamestdio/scorm/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var apiHandle = null;
    var isAPIFound = false;
    function find(win) {
      var API = null, findAttempts = 0, findAttemptLimit = 500, traceMsgPrefix = "SCORM.API.find";
      while (!win.API && !win.API_1484_11 && win.parent && win.parent != win && findAttempts <= findAttemptLimit) {
        findAttempts++;
        win = win.parent;
      }
      if (exports.scorm.version) {
        switch (exports.scorm.version) {
          case "2004":
            if (win.API_1484_11) {
              API = win.API_1484_11;
            } else {
              debug(traceMsgPrefix + ": SCORM version 2004 was specified by user, but API_1484_11 cannot be found.");
            }
            break;
          case "1.2":
            if (win.API) {
              API = win.API;
            } else {
              debug(traceMsgPrefix + ": SCORM version 1.2 was specified by user, but API cannot be found.");
            }
            break;
        }
      } else {
        if (win.API_1484_11) {
          exports.scorm.version = "2004";
          API = win.API_1484_11;
        } else if (win.API) {
          exports.scorm.version = "1.2";
          API = win.API;
        }
      }
      if (API) {
        debug(traceMsgPrefix + ": API found. Version: " + exports.scorm.version);
        debug("API: " + API);
      } else {
        debug(traceMsgPrefix + ": Error finding API. \nFind attempts: " + findAttempts + ". \nFind attempt limit: " + findAttemptLimit);
      }
      return API;
    }
    function getAPI() {
      var API = null, win = window;
      API = find(win);
      if (!API && win.parent && win.parent != win) {
        API = find(win.parent);
      }
      if (!API && win.top && win.top.opener) {
        API = find(win.top.opener);
      }
      if (!API && win.top && win.top.opener && win.top.opener.document) {
        API = find(win.top.opener.document);
      }
      if (API) {
        isAPIFound = true;
      } else {
        debug("getAPI failed: Can't find the API!");
      }
      return API;
    }
    function getHandle() {
      if (!apiHandle && !isAPIFound) {
        apiHandle = getAPI();
      }
      return apiHandle;
    }
    var Scorm = (
      /** @class */
      function() {
        function Scorm2() {
          this.handleExitMode = true;
          this.handleCompletionStatus = true;
          this.isDebugActive = true;
          this.isActive = false;
        }
        Scorm2.prototype.configure = function(config) {
          if (config === void 0) {
            config = {};
          }
          this.version = config.version;
          this.handleExitMode = config.handleExitMode === void 0 ? !!config.handleExitMode : true;
          this.handleCompletionStatus = config.handleCompletionStatus === void 0 ? !!config.handleCompletionStatus : true;
          this.isDebugActive = config.debug === void 0 ? !!config.debug : true;
        };
        Scorm2.prototype.initialize = function() {
          var success = false, traceMsgPrefix = "scorm.initialize ";
          debug("connection.initialize called.");
          if (!this.isActive) {
            var API = getHandle(), errorCode = 0;
            if (API) {
              switch (this.version) {
                case "1.2":
                  success = toBoolean(API.LMSInitialize(""));
                  break;
                case "2004":
                  success = toBoolean(API.Initialize(""));
                  break;
              }
              if (success) {
                errorCode = this.getLastError();
                if (errorCode !== null && errorCode === 0) {
                  this.isActive = true;
                  if (this.handleCompletionStatus) {
                    this.completionStatus = this.status();
                    if (this.completionStatus) {
                      switch (this.completionStatus) {
                        //Both SCORM 1.2 and 2004
                        case "not attempted":
                          this.status("incomplete");
                          break;
                        //SCORM 2004 only
                        case "unknown":
                          this.status("incomplete");
                          break;
                      }
                      exports.scorm.commit();
                    }
                  }
                } else {
                  success = false;
                  debug(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + this.getErrorString(errorCode));
                }
              } else {
                errorCode = this.getLastError();
                if (errorCode !== null && errorCode !== 0) {
                  debug(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + this.getErrorString(errorCode));
                } else {
                  debug(traceMsgPrefix + "failed: No response from server.");
                }
              }
            } else {
              debug(traceMsgPrefix + "failed: API is null.");
            }
          } else {
            debug(traceMsgPrefix + "aborted: Connection already active.");
          }
          return success;
        };
        Scorm2.prototype.terminate = function() {
          var success = false, traceMsgPrefix = "scorm.terminate ";
          if (this.isActive) {
            var API = getHandle(), errorCode = 0;
            if (API) {
              if (exports.scorm.handleExitMode && !this.exitStatus) {
                if (this.completionStatus !== "completed" && this.completionStatus !== "passed") {
                  switch (exports.scorm.version) {
                    case "1.2":
                      success = exports.scorm.set("cmi.core.exit", "suspend");
                      break;
                    case "2004":
                      success = exports.scorm.set("cmi.exit", "suspend");
                      break;
                  }
                } else {
                  switch (exports.scorm.version) {
                    case "1.2":
                      success = exports.scorm.set("cmi.core.exit", "logout");
                      break;
                    case "2004":
                      success = exports.scorm.set("cmi.exit", "normal");
                      break;
                  }
                }
              }
              success = exports.scorm.commit();
              if (success) {
                switch (exports.scorm.version) {
                  case "1.2":
                    success = toBoolean(API.LMSFinish(""));
                    break;
                  case "2004":
                    success = toBoolean(API.Terminate(""));
                    break;
                }
                if (success) {
                  this.isActive = false;
                } else {
                  errorCode = this.getLastError();
                  debug(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + this.getErrorString(errorCode));
                }
              }
            } else {
              debug(traceMsgPrefix + "failed: API is null.");
            }
          } else {
            debug(traceMsgPrefix + "aborted: Connection already terminated.");
          }
          return success;
        };
        Scorm2.prototype.get = function(parameter) {
          var value = null, traceMsgPrefix = "scorm.get('" + parameter + "') ";
          if (this.isActive) {
            var API = getHandle(), errorCode = 0;
            if (API) {
              switch (exports.scorm.version) {
                case "1.2":
                  value = API.LMSGetValue(parameter);
                  break;
                case "2004":
                  value = API.GetValue(parameter);
                  break;
              }
              errorCode = this.getLastError();
              if (value !== "" || errorCode === 0) {
                switch (parameter) {
                  case "cmi.core.lesson_status":
                  case "cmi.completion_status":
                    this.completionStatus = value;
                    break;
                  case "cmi.core.exit":
                  case "cmi.exit":
                    this.exitStatus = value;
                    break;
                }
              } else {
                debug(traceMsgPrefix + "failed. \nError code: " + errorCode + "\nError info: " + this.getErrorString(errorCode));
              }
            } else {
              debug(traceMsgPrefix + "failed: API is null.");
            }
          } else {
            debug(traceMsgPrefix + "failed: API connection is inactive.");
          }
          debug(traceMsgPrefix + " value: " + value);
          return String(value);
        };
        Scorm2.prototype.set = function(parameter, value) {
          var success = false, traceMsgPrefix = "scorm.set('" + parameter + "') ";
          if (this.isActive) {
            var API = getHandle(), errorCode = 0;
            if (API) {
              switch (exports.scorm.version) {
                case "1.2":
                  success = toBoolean(API.LMSSetValue(parameter, value));
                  break;
                case "2004":
                  success = toBoolean(API.SetValue(parameter, value));
                  break;
              }
              if (success) {
                if (parameter === "cmi.core.lesson_status" || parameter === "cmi.completion_status") {
                  this.completionStatus = value;
                }
              } else {
                errorCode = this.getLastError();
                debug(traceMsgPrefix + "failed. \nError code: " + errorCode + ". \nError info: " + this.getErrorString(errorCode));
              }
            } else {
              debug(traceMsgPrefix + "failed: API is null.");
            }
          } else {
            debug(traceMsgPrefix + "failed: API connection is inactive.");
          }
          debug(traceMsgPrefix + " value: " + value);
          return success;
        };
        Scorm2.prototype.commit = function() {
          var success = false, traceMsgPrefix = "scorm.commit failed";
          if (this.isActive) {
            var API = getHandle();
            if (API) {
              switch (exports.scorm.version) {
                case "1.2":
                  success = toBoolean(API.LMSCommit(""));
                  break;
                case "2004":
                  success = toBoolean(API.Commit(""));
                  break;
              }
            } else {
              debug(traceMsgPrefix + ": API is null.");
            }
          } else {
            debug(traceMsgPrefix + ": API connection is inactive.");
          }
          return success;
        };
        Scorm2.prototype.status = function(status) {
          var success = false, traceMsgPrefix = "scorm.status failed", cmi = "", action = arguments.length === 0 ? "get" : "set";
          switch (exports.scorm.version) {
            case "1.2":
              cmi = "cmi.core.lesson_status";
              break;
            case "2004":
              cmi = "cmi.completion_status";
              break;
          }
          switch (action) {
            case "get":
              success = this.get(cmi);
              break;
            case "set":
              if (status !== null) {
                success = this.set(cmi, status);
              } else {
                success = false;
                debug(traceMsgPrefix + ": status was not specified.");
              }
              break;
            default:
              success = false;
              debug(traceMsgPrefix + ": no valid action was specified.");
          }
          return success;
        };
        Scorm2.prototype.getLastError = function() {
          var API = getHandle(), code = 0;
          if (API) {
            switch (this.version) {
              case "1.2":
                code = parseInt(API.LMSGetLastError(), 10);
                break;
              case "2004":
                code = parseInt(API.GetLastError(), 10);
                break;
            }
          } else {
            debug("scorm.getLastError failed: API is null.");
          }
          return code;
        };
        Scorm2.prototype.getErrorString = function(errorCode) {
          var API = getHandle(), result = "";
          if (API) {
            switch (this.version) {
              case "1.2":
                result = API.LMSGetErrorString(errorCode.toString());
                break;
              case "2004":
                result = API.GetErrorString(errorCode.toString());
                break;
            }
          } else {
            debug("scorm.getErrorString failed: API is null.");
          }
          return String(result);
        };
        Scorm2.prototype.getDiagnostic = function(errorCode) {
          var API = getHandle(), result = "";
          if (API) {
            switch (this.version) {
              case "1.2":
                result = API.LMSGetDiagnostic(errorCode);
                break;
              case "2004":
                result = API.GetDiagnostic(errorCode);
                break;
            }
          } else {
            debug("scorm.getDiagnostic failed: API is null.");
          }
          return String(result);
        };
        return Scorm2;
      }()
    );
    exports.Scorm = Scorm;
    function toBoolean(value) {
      switch (typeof value) {
        case "object":
        case "string":
          return /(true|1)/i.test(value);
        case "number":
          return !!value;
        case "boolean":
          return value;
        case "undefined":
          return null;
        default:
          return false;
      }
    }
    function debug(msg) {
      if (exports.scorm.isDebugActive) {
        window.console.log(msg);
      }
    }
    exports.scorm = new Scorm();
  }
});
export default require_lib();
//# sourceMappingURL=@gamestdio_scorm.js.map
